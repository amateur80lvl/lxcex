#!/bin/sh -e

# Share directory
#
# This script creates idmapped thunk mounts for each user
# who has mount point for shared directory.
# These thunks will be bind mounted in container's rootfs by share.mount script.
# That's because mount-idmapped hungs forever if called from mount hook.
#
# Arguments: shared_directory

share="$1"

if [ -z "$share" ] ; then
    echo "Shared directory argument is required"
    exit 1
fi

share_basename=`basename "$share"`

from_uid=`stat -c %u "$share"`
from_gid=`stat -c %g "$share"`

for home in "${LXC_ROOTFS_PATH}"/home/* ; do

    home=`readlink -f "$home"`
    [ -d "$home/$share_basename" ] || continue

    to_uid=`stat -c %u "$home"`
    to_gid=`stat -c %g "$home"`

    username=`basename "$home"`

    thunk="/mnt/thunks/share/$share_basename/$LXC_NAME/$username"
    mkdir -p "$thunk"

    if ! findmnt "$thunk" >/dev/null ; then
        mount-idmapped --map-mount u:$from_uid:$to_uid:1 --map-mount g:$from_gid:$to_gid:1 "$share" "$thunk"
    fi
done

root_share_dir="${LXC_ROOTFS_PATH}/root/$share_basename"
if [ -d "$root_share_dir" ] ; then

    to_uid=`stat -c %u "${LXC_ROOTFS_MOUNT}/root"`
    to_gid=`stat -c %g "${LXC_ROOTFS_MOUNT}/root"`

    thunk="/mnt/thunks/share/$share_basename/$LXC_NAME/root"
    mkdir -p "$thunk"

    if ! findmnt "$thunk" >/dev/null ; then
        mount-idmapped --map-mount u:$from_uid:$to_uid:1 --map-mount g:$from_gid:$to_gid:1 "$root_share_dir" "$thunk"
    fi
fi
